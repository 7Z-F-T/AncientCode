#include "head.h"

int main(int argc, char** argv){
	//读入文件
	if(argc!=2){
		cout<<"Command Input Error！";
		return -1;
	}
	char* filename=argv[1];
	ifstream fin(filename);
	if(!fin){
		cout<<"Cannot Open File！";
		return -1;
	}
	node s;//初始状态节点
	string temp;
	int i=0,j=0;
	fin>>temp;
	while(j<3){
		while(i<3){
			s.num[j][i]=atoi(temp.c_str());
			i++;
			fin>>temp;
		}
		j++;
		i=0;
	}
	//开始搜索
	stateCount=0;
	state.push_back(node(s.num[0][0],s.num[0][1],s.num[0][2],s.num[1][0],s.num[1][1]
		,s.num[1][2],s.num[2][0],s.num[2][1],s.num[2][2],0,-1));
	open.insert(state[0].mark);
	while(open.size()!=0){
		int pos=*(open.begin());
		if(is_goal(state[pos])==true) {
			printResult(state[pos]);
			cout<<endl;
			cout<<"total steps:"<<state[pos].g;
			break;
		}
		int a,b;//寻找空格位置，将空格位置(行，列）保存在a，b中
		for(int i=0;i<3;i++){
			for(int j=0;j<3;j++)
				if(state[pos].num[i][j]==0) {a=i;b=j;break;}
		}
		if(a==0&&b==0){//空格在0,0处
			if(should_expand(state[pos].num[0][1],state[pos].num[0][0],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][1],state[pos].num[0][0],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[1][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[0][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[1][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[0][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
		}
		if(a==0&&b==2){//空格在0,2处
			if(should_expand(state[pos].num[0][0],state[pos].num[0][2],state[pos].num[0][1],
				state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][2],state[pos].num[0][1],
					state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[1][2],
				state[pos].num[1][0],state[pos].num[1][1],state[pos].num[0][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[1][2],
					state[pos].num[1][0],state[pos].num[1][1],state[pos].num[0][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
		}
		if(a==2&&b==0){//空格在2,0处
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[2][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[1][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[2][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[1][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][1],
				state[pos].num[2][0],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][1],
					state[pos].num[2][0],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
		}
		if(a==2&&b==2){//空格在2,2处
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[1][1],state[pos].num[2][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[1][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[1][1],state[pos].num[2][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[1][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[2][2],state[pos].num[2][1])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[2][2],state[pos].num[2][1],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
		}
		if(a==0&&b==1){//空格在0,1处
			if(should_expand(state[pos].num[0][1],state[pos].num[0][0],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][1],state[pos].num[0][0],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][2],state[pos].num[0][1],
				state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][2],state[pos].num[0][1],
					state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[1][1],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[0][1],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[1][1],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[0][1],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
		}
		if(a==1&&b==0){//空格在1,0处
			if(should_expand(state[pos].num[1][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[0][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[1][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[0][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[1][1],state[pos].num[1][0],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[1][1],state[pos].num[1][0],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[2][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[1][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[2][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[1][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
		}
		if(a==1&&b==2){//空格在1,2处
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[1][2],
				state[pos].num[1][0],state[pos].num[1][1],state[pos].num[0][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[1][2],
					state[pos].num[1][0],state[pos].num[1][1],state[pos].num[0][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[1][2],state[pos].num[1][1],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[1][2],state[pos].num[1][1],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[1][1],state[pos].num[2][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[1][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[1][1],state[pos].num[2][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[1][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
		}
		if(a==2&&b==1){//空格在2,1处
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][1],
				state[pos].num[2][0],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][1],
					state[pos].num[2][0],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[2][1],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[1][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[2][1],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[1][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[2][2],state[pos].num[2][1])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[1][1],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[2][2],state[pos].num[2][1],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
		}
		if(a==1&&b==1){//空格在1,1处
			if(should_expand(state[pos].num[0][0],state[pos].num[1][1],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[0][1],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[1][1],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[0][1],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[1][1],state[pos].num[1][0],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[1][1],state[pos].num[1][0],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[1][2],state[pos].num[1][1],state[pos].num[2][0],
				state[pos].num[2][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[1][2],state[pos].num[1][1],state[pos].num[2][0],
					state[pos].num[2][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
			if(should_expand(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
				state[pos].num[1][0],state[pos].num[2][1],state[pos].num[1][2],state[pos].num[2][0],
				state[pos].num[1][1],state[pos].num[2][2])==true)
			{
				state.push_back(node(state[pos].num[0][0],state[pos].num[0][1],state[pos].num[0][2],
					state[pos].num[1][0],state[pos].num[2][1],state[pos].num[1][2],state[pos].num[2][0],
					state[pos].num[1][1],state[pos].num[2][2],state[pos].g+1,state[pos].mark));
				open.insert(state[state.size()-1].mark);
			}
		}
		open.erase(open.begin());
		//sort(open.begin(),open.end(),sortOpen());
		//int n=findOpenMin();//找到open表里f值最小的节点位置
		/*int temp;//将f值最小的节点放在open表的最前面
		temp=pos;
		pos=open[n];
		open[n]=temp;*/
		/*for(int i=0;i<state.size();i++){
			printNode(state[i]);
			cout<<endl;
		}*/
		cout<<state.size()<<" "<<open.size()<<"\r";
	}
	return 0;
}