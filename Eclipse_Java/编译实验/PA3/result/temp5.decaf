class Matrix {
  // these methods are intended to be overridden by subclasses
  // if only we had pure virtual/abstract methods in SOOP...
    void Init() {}
    void Set(int x, int y, int value) {} 
    int Get(int x, int y) {}

    void PrintMatrix() {
        int i;
        int j;
        i = 0;
        while (i < 10) {
            j = 0;
            while (j < 10) {
	              Print(this.Get(i,j), "\t");
	              j = j + 1;
            }
            i = i + 1;
            Print("\n");
        }
    }
    
    void SeedMatrix() {
        int i;
        int j;
        i = 0;
        while (i < 5) {
            j = 0;
            while (j < 5) {
	              this.Set(i,j, i+j);
	              j = j + 1;
            }
            i = i + 1;
        }
        this.Set(2,3,4);
        this.Set(4,6,2);
        this.Set(2,3,5);
        this.Set(0,0,1);
        this.Set(1,6,3);
        this.Set(7,7,7);
    }
}


// Matrix as an array
class DenseMatrix extends Matrix {
    int[][] m;
    void Init() {
        int i;
        int j;
        i = 0;
        // create mem
        this.m = new int[][10];
        
        while (i < 10) {
           this.m[i] = new int[10];
           i = i + 1;
        }
        
        i = 0;
        while (i < 10) {
            j = 0;
            i = i + 1;
        }
    }
    void Set(int x, int y, int value) {
        this.m[x][y] = value;
    }
    int Get(int x, int y) {
        return this.m[x][y];
    }
}




class Main {
    static void main()  {
        class Matrix m;
        Print("Dense Rep \n");
        m = new DenseMatrix();
        m.Init();
       // m.SeedMatrix();
       // m.PrintMatrix();
  
  
       // Print("Sparse Rep \n");
       // m = new SparseMatrix();
       // m.Init();
       // m.SeedMatrix();
       // m.PrintMatrix();
    }
}
